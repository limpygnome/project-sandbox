function Texture(src, name, speed, frames, frameVertices, frameData){    var gl = projectSandbox.gl;        // Set parent    this.src = src;        // Assign data    this.name = name;    this.speed = speed;    this.frames = frames;    this.frameVertices = frameVertices;    this.frameCoordinates = frameVertices * 2.0;    this.frameData = frameData;        // Setup initial state data    this.frame = 0;    this.lastUpdated = projectSandbox.currentTime;        // Create buffer for texture vertices from frame data    this.bufferTextureVertices = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferTextureVertices);    gl.bufferData(gl.ARRAY_BUFFER, this.frameData, gl.STATIC_DRAW);    this.bufferTextureVertices.itemSize = 2;    this.bufferTextureVertices.numItems = frameVertices * frames;}Texture.prototype.bind = function(gl, shaderProgram){    // Bind texture vertices buffer    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferTextureVertices);    gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, this.bufferTextureVertices.itemSize, gl.FLOAT, false, 0, this.getFrameOffset());        // Bind texture    gl.activeTexture(gl.TEXTURE0);    gl.bindTexture(gl.TEXTURE_2D, this.src.texture);        // Set shader to use texture    gl.uniform1i(shaderProgram.samplerUniform, 0);}Texture.prototype.unbind = function(gl){    // Set binded texture to null i.e. unbind    gl.bindTexture(gl.TEXTURE_2D, null);}Texture.prototype.logic = function(){    if(this.speed > 0 && projectSandbox.currentTime - this.lastUpdated > this.speed)    {        // Reset time        this.lastUpdated = projectSandbox.currentTime;                // Move to next frame        if(++this.frame >= this.frames)        {            this.frame = 0;        }    }}Texture.prototype.getFrameOffset = function(){    return this.frame * this.frameCoordinates * 4;}